<?php
use exface\Core\CommonLogic\Workbench;
use exface\Core\Factories\UiPageFactory;
use exface\Core\CommonLogic\NameResolver;

global $modx, $exface;

switch ($modx->event->name) {
    /**
     * Synchronizes a modx user account with an ExFace core user
     */
    case "OnManagerSaveUser":
        $sql = "SELECT mu.username,mu.password,ma.*  
				FROM " . $modx->getFullTableName("manager_users") . " mu 
				INNER JOIN " . $modx->getFullTableName("user_attributes") . " ma ON ma.internalKey = mu.id 
				WHERE mu.id = '$userid'";
        $rs = $modx->dbQuery($sql);
        if (! $rs)
            $e->alert("Error while reading database " . mysql_error());
        else {
            $row = $modx->fetchRow($rs);
            exfUserUpdate($row);
        }
        break;
    /*
     * Prefixes the autogenerated resource aliases with the app alias of the root meta object of the document
     */
    case "OnStripAlias":
        if ($_REQUEST['alias'] === '') {
            if (! isset($exface)) {
                include_once ($modx->config['base_path'] . 'exface/exface.php');
                $exface = Workbench::startNewInstance();
            }
            if ($exface->cms()->isUiPage($_REQUEST['ta'], $_REQUEST['id'])) {
                try {
                    $app_alias = UiPageFactory::createFromString($exface->ui(), $_REQUEST['id'], $_REQUEST['ta'])->getWidgetRoot()->getMetaObject()->getNamespace();
                } catch (Throwable $e) {
                    break;
                }
                $alias = $app_alias . NameResolver::NAMESPACE_SEPARATOR . str_replace(' ', '-', $alias);
                $modx->event->output($alias);
            }
        }
        break;
}

/**
 * TODO
 */
function exfUserUpdate($mngr)
{
    global $modx;
    $uid = $mngr['username'];
    // check for existing account
    $rs = $modx->dbQuery("SELECT * FROM " . $modx->getFullTableName("web_users") . " WHERE username='$uid'");
    $count = $modx->recordCount($rs);
    if ($count > 0) {
        // update existing web account
        $fields = array();
        $allowed = array(
            "fullname",
            "email",
            "phone",
            "mobilephone",
            "blocked",
            "blockeduntil",
            "dob",
            "gender",
            "country",
            "state",
            "zip",
            "fax",
            "photo",
            "comment",
            "blockedafter"
        );
        foreach ($mngr as $key => $vlaue) {
            if (in_array($key, $allowed)) {
                $fields[$key] = $mngr[$key];
            }
        }
        $modx->updIntTableRow($fields, "web_user_attributes", " internalKey='" . $web['id'] . "'");
        $modx->updIntTableRow(array(
            "password" => $mngr["password"]
        ), "web_users", " id='" . $web["id"] . "'");
    } else {
        // create new account
        $fields = array();
        $allowed = array(
            "fullname",
            "email",
            "phone",
            "mobilephone",
            "blocked",
            "blockeduntil",
            "dob",
            "gender",
            "country",
            "state",
            "zip",
            "fax",
            "photo",
            "comment",
            "blockedafter"
        );
        foreach ($mngr as $key => $vlaue) {
            if (in_array($key, $allowed)) {
                $fields[$key] = $mngr[$key];
            }
        }
        $modx->putIntTableRow(array(
            "username" => $mngr["username"],
            "password" => $mngr["password"]
        ), "web_users");
        $fields["internalKey"] = mysqli_insert_id();
        $modx->putIntTableRow($fields, "web_user_attributes");
    }
}